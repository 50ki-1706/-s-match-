// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  NOT_SPECIFIED
}

enum EventStatus {
  OPEN
  CLOSED
  CANCELLED
}

enum MusicGenre {
  POP
  ROCK
  HIP_HOP
  R_B
  JAZZ
  CLASSICAL
  EDM
  COUNTRY
  FOLK
  BLUES
  SOUL
  FUNK
  REGGAE
  SKA
  PUNK
  HEAVY_METAL
  GOSPEL
  DISCO
  HOUSE
  TECHNO
  TRANCE
  DRUM_AND_BASS
  AMBIENT
  LATIN
  SALSA
  BOSSA_NOVA
  TANGO
  K_POP
  J_POP
  ENKA
  AFROBEAT
  WORLD_MUSIC
  NEW_AGE
  PROGRESSIVE_ROCK
  ALTERNATIVE_ROCK
  GRUNGE
  INDIE_ROCK
  BLUES_ROCK
  FUSION
  OPERA
  OTHER
}

enum MatchingStatus {
  PENDING
  LIKED
  REJECTED
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  gender             Gender               @default(NOT_SPECIFIED)
  age                Int                  @default(0)
  //自己紹介文
  bio                String?
  UserFavoriteGenre  UserFavoriteGenre[] // お気に入りジャンル
  UserFavoriteArtist UserFavoriteArtist[] // お気に入りアーティスト

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Event     Event[]
  Matching  Matching[] @relation("SentMatchings")
  Matching2 Matching[] @relation("ReceivedMatchings")

  ChatRoomParticipant ChatRoomParticipant[]
  Message             Message[]
  EventParticipant    EventParticipant[] // イベントの参加者リスト
  EventApplicant      EventApplicant[] // イベントの応募者リスト
  Blog                Blog[]
  BlogLike            BlogLike[]
  BlogComment         BlogComment[]
  BlogCommentLike     BlogCommentLike[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Event {
  id          String      @id @default(cuid())
  title       String      @unique
  description String
  status      EventStatus @default(OPEN)
  organizerId String // イベントの主催者
  organizer   User        @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  ticketCount Int? // 募集者が持っているチケットの枚数（nullable）
  location    String // イベントの場所
  externalUrl String? // イベントの外部URL（nullable）
  eventDate   DateTime // イベントの日時
  genre       MusicGenre // イベントのジャンル
  fee         Int? // 金額（単位はアプリで統一）
  deadline    DateTime? // イベントの締め切り日時

  participantsList EventParticipant[] // イベントの参加者リスト
  applicants       EventApplicant[] // イベントの応募者リスト

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventApplicant {
  eventId String
  userId  String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([eventId, userId])
}

model EventParticipant {
  eventId  String
  userId   String
  feedback String? //stringならfeedbackを更新、nullならfeedbackを削除を表すように実装されている
  event    Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([eventId, userId])
}

model UserFavoriteGenre {
  userId String
  genre  MusicGenre

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, genre])
}

model UserFavoriteArtist {
  userId String
  artist String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, artist])
}

model Matching {
  senderId       String
  receiverId     String
  matchingStatus MatchingStatus @default(PENDING)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  sender   User @relation("SentMatchings", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMatchings", fields: [receiverId], references: [id], onDelete: Cascade)

  @@id([senderId, receiverId])
}

// DMルーム本体
model ChatRoom {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 参加者一覧（必ず2人だけ登録される想定）
  participants ChatRoomParticipant[]
  Message      Message[]
}

// DMルーム ⇔ ユーザー の中間テーブル
model ChatRoomParticipant {
  roomId String
  userId String

  chatRoom ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([roomId, userId])
}

model Message {
  id        String   @id @default(cuid())
  roomId    String
  senderId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Blog {
  id      String @id @default(cuid())
  title   String
  content String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  BlogLike    BlogLike[]
  BlogComment BlogComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogLike {
  blogId String
  userId String
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([blogId, userId])
}

model BlogComment {
  id        String   @id @default(cuid())
  blogId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  BlogCommentLike BlogCommentLike[]
}

model BlogCommentLike {
  blogCommentId String
  userId        String
  blogComment   BlogComment @relation(fields: [blogCommentId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([blogCommentId, userId])
}
